const cacheName="scrum-poker-1633963011788",contentToCache=["/","/index.html"],networkOnlyRequests=[],allowedOpaqueCaching=[/\.js$/,/\.css$/,/\.svg$/,/\.jpg$/,/\.jpeg$/,/\.png$/,/\.gif$/];self.addEventListener("install",(e=>{console.log("[Service Worker] Install"),self.skipWaiting(),e.waitUntil((async()=>{const e=await caches.open(cacheName);console.log("[Service Worker] Caching all: app shell and content"),await e.addAll(contentToCache)})())})),self.addEventListener("fetch",(e=>{if("GET"!==e.request.method||networkOnlyRequests.some((t=>t.test(e.request.url))))return console.log(`[Service Worker] Ignoring request: ${e.request.method} ${e.request.url}`),void e.respondWith(fetch(e.request));e.respondWith(async function(){const t=await caches.open(cacheName),s=await t.match(e.request);if(s&&console.log(`[Service Worker] Cached request: ${e.request.method} ${e.request.url}`),"only-if-cached"===e.request.cache&&"same-origin"!==e.request.mode)return;const r=fetch(e.request);return e.waitUntil(async function(){const s=await r;console.log(`[Service Worker] Network response for request ${e.request.method} ${e.request.url}`,s.status,s.type),(200===s.status&&("basic"===s.type||"cors"===s.type)||0===s.status&&"opaque"===s.type&&allowedOpaqueCaching.some((t=>t.test(e.request.url))))&&(console.log(`[Service Worker] Caching response for request ${e.request.method} ${e.request.url}`,s.status,s.type),await t.put(e.request,s.clone()))}()),s||r}())})),self.addEventListener("activate",(e=>{console.log("[Service Worker] Activate - clearing old caches"),e.waitUntil((async()=>{await self.clients.claim(),caches.keys().then((e=>Promise.all(e.filter((e=>e!==cacheName)).map((e=>caches.delete(e))))))})())}));